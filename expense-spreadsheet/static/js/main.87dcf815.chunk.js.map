{"version":3,"sources":["logo.svg","Components/OutputField.js","Components/InputField.js","Components/AllFields.js","Data/FieldList.js","Components/Spreadsheet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","OutputField","this","props","val","Component","InputField","state","value","event","console","log","callback","target","index","setState","name","onChange","e","handleChange","style","float","AllFields","out","input","map","el","ind","v","data","replace","oneYear","funcs","colB","fourYear","colC","oneYearTotal","reduce","ac","fourYearTotal","adjustedFourYear","className","arr","key","toFixed","ColumnA","makeMultiplierFunction","m","x","m12","m4yr","Spreadsheet","updateInput","n","Fragment","ColumnBFunc","ColumnCFunc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87dcf815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass OutputField extends Component\n{\n    render()\n    {\n        return (\n            <div>\n                <span>{ this.props.val }</span>\n            </div>\n        );\n    }\n}\n  \nexport default OutputField;","import React, { Component } from 'react';\n\nclass InputField extends Component\n{\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n    }\n\n    handleChange(event) {\n        console.log( this.props );\n        this.props.callback( event.target.value, this.props.index );\n        this.setState({value: event.target.value});\n    }\n    \n    render()\n    {\n        return (\n            <div>\n                <span>{ this.props.name }</span>\n                <input value={this.state.value} onChange={e => this.handleChange(e)} style={ {float: \"right\"} } />\n            </div>\n        );\n    }\n}\n  \nexport default InputField;","import React, { Component } from 'react';\nimport OutputField from './OutputField'\nimport InputField from './InputField'\n\nclass AllFields extends Component\n{\n    componentDidUpdate()\n    {\n        console.log( \"all fields state\", this.state );\n    }\n\n    render()\n    {\n        //console.log( this.props );\n\n        const out = this.props.input.map(\n            (el, ind) =>\n            {\n                const v = this.props.data[ind] ? this.props.data[ind].replace(/,/g, '') : 0;\n                return (\n                    {\n                        input: el,\n                        oneYear: this.props.funcs.colB( v ),\n                        fourYear: this.props.funcs.colC( v )\n                    }\n                );\n            }\n        );\n\n        const oneYearTotal = out.reduce( (ac, el) => ac + el.oneYear, 0 );\n        const fourYearTotal = out.reduce( (ac, el) => ac + el.fourYear, 0 );\n        const adjustedFourYear = fourYearTotal * 1.12\n\n        console.log( oneYearTotal );\n        console.log( fourYearTotal );\n\n        return (\n            <table className=\"spreadsheet\">\n                <thead>\n                    <tr>\n                        <td></td>\n                        <td>one year</td>\n                        <td>four years</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        out.map(\n                            (el, ind, arr) =>\n                            {\n                                return (\n                                    <tr key={ind}>\n                                        <td><InputField name={el.input} key={ind} index={ind} callback={this.props.callback.input} /></td>\n                                        <td><OutputField val={ el.oneYear } key={ind} index={ind} /></td>\n                                        <td><OutputField val={ el.fourYear } key={ind} index={ind} /></td>\n                                    </tr>\n                                );\n                            }\n                        )\n                    }\n                    <tr>\n                        <td />\n                        <td>One Year Total:</td>\n                        <td>{ oneYearTotal.toFixed(2) }</td>\n                    </tr>\n                    <tr>\n                        <td  />\n                        <td>Four Year Total:</td>\n                        <td>{ fourYearTotal.toFixed(2) }</td>\n                    </tr>\n                    <tr>\n                        <td  />\n                        <td>4yr Total with CoL increase:</td>\n                        <td>{ adjustedFourYear.toFixed(2) }</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default AllFields;","/*\nRent or House Payment\nProperty Tax (if own home)\nHome Insurance (if own home)\nRepairs/Maintenance Estimate                \nUtility: Elect (Winter month)\nUtility: Natural Gas (Winter month)\nUtility: Internet/Cable\nUtility: Phone \nUtility: Garbage/Recycling\nUtility: Water/Sewer \nUtility:Other _____________\nGroceries & Household Supplies: (shows average/mo)\n*/\n\nconst ColumnA =\n    [\n        \"Rent or House Payment\",\n        \"Property Tax (if own home)\",\n        \"Home Insurance (if own home)\",\n        \"Repairs/Maintenance Estimate\",\n        \"Utility: Elect (Winter month)\",\n        \"Utility: Natural Gas (Winter month)\",\n        \"Utility: Internet/Cable\",\n        \"Utility: Phone\",\n        \"Utility: Garbage/Recycling\",\n        \"Utility: Water/Sewer\",\n        \"Utility: Other\",\n        \"Groceries & Household Supplies: (shows average/mo)\"\n    ];\n\nconst makeMultiplierFunction = m => ( x => x * m );\n\nconst m12 = makeMultiplierFunction( 12 );\nconst m4yr = makeMultiplierFunction( 4 * 12 );\n\nexport { ColumnA, m12 as ColumnBFunc, m4yr as ColumnCFunc };","import React, { Component } from 'react';\nimport AllFields from './AllFields';\nimport { ColumnA, ColumnBFunc, ColumnCFunc } from '../Data/FieldList';\n\nclass Spreadsheet extends Component {\n    constructor( props )\n    {\n        super( props )\n        this.state = { input: [] }\n    }\n\n    componentDidUpdate()\n    {\n        console.log( this.state.input );\n    }\n\n    updateInput = (val, ind) => { this.setState( state => { let n = { ...state, input: [...state.input] }; n.input[ ind ] = val; console.log( ind, val , n); return n; } ) };\n\n    render() {\n      return (\n        <React.Fragment>\n            <AllFields input={ColumnA} callback={ {input: this.updateInput} } data={this.state.input} funcs={ { colB: ColumnBFunc, colC: ColumnCFunc } } />\n        </React.Fragment>\n      );\n    }\n  }\n  \n  export default Spreadsheet;","import React from 'react';\nimport logo from './logo.svg';\nimport'./App.css';\n\nimport Spreadsheet from './Components/Spreadsheet'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Spreadsheet name=\"David\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}